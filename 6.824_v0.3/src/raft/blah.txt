
type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int
}

type LogItem struct {
	Entry ApplyMsg
	Term  int
}

//
// A Go object implementing a single Raft peer.
//

type PersistantState struct {
	CurrentTerm int
	VotedFor    int
	Log         map[int]LogItem
}

type VolatileState struct {
	CommitIndex int
	LastApplied int
}

type LeaderState struct {
	NextIndex  map[int]int
	MatchIndex map[int]int
	//TODO: Add heartbeat timer
	HeartbeatTimer raft_utils.Timer
}

type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	me        int                 // this peer's index into peers[]
	dead      int32               // set by Kill()

	ps PersistantState
	vs VolatileState
	ls *LeaderState // will hold nil if server isnt leader
	ss raft_utils.ServerState
	//TODO: Add election timer

	election_timer raft_utils.Timer
}



type RequestVoteArgs struct {
	// Your data here (2A, 2B).
	Term         int
	CandidateId  int
	LastLogIndex int
	LastLogTerm  int
}

//
// example RequestVote RPC reply structure.
// field names must start with capital letters!
//
type RequestVoteReply struct {
	// Your data here (2A).
	Term        int
	VoteGranted bool
}







